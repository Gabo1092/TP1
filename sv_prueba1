#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#include <signal.h>


#define RESET		0
#define BRIGHT 		1
#define DIM			2
#define UNDERLINE 	3
#define BLINK		4
#define REVERSE		7
#define HIDDEN		8

#define BLACK 		0
#define RED		    1
#define GREEN		2
#define YELLOW		3
#define BLUE		4
#define MAGENTA		5
#define CYAN		6
#define	WHITE		7

void textcolor(int attr, int fg, int bg)
{	char command[13];

	/* Command is the control command to the terminal */
	sprintf(command, "%c[%d;%d;%dm", 0x1B, attr, fg + 30, bg + 40);
	printf("%s", command);
}

int main() //int argc, char *argv[])
{
	/*if (argc < 2) {
				 fprintf(stderr,"Error: No se especifica el puerto la forma correcta es ./\"nombreDeArchivo\" \"puerto\"\n\a");
				 exit(1);
			 }
	else if (argc > 6) {
		 fprintf(stderr,"Error: Se detectaron argumentos extra en el programa la forma correcta es ./\"nombreDeArchivo\" \"puerto\"\n\a");
		 exit(1);
	 }*/
	 
		printf("Bienvenidos al servidor");

		int socketCreado, socketCliente; //Es un puntero a la estructura sockaddr, que contiene puerto e IP. 
		int numeroPuerto; // Donde guardo el Numero de puerto
		socklen_t largoCliente; //Tamaño de la dirección
		char enviar[1024];
		char buf[1024];
		char buffer[1024]; 
		struct sockaddr_in direcServer, direcCliente;//Estructuras con las direcciones del servidor y el cliente
		//int flag;//flag para determinar si la lectura o escritura tira un error
		//char end[]="Adios\n";//Palabra para finalizar conexiones

		//system("clear");

		FILE *puerto = fopen("puerto.txt", "r");
		printf("abriendo txt");
		if (puerto==NULL)
		{
			perror ("Error al abrir fichero.txt");
			return -1;
		}
		fscanf (puerto, "%d", &numeroPuerto);
		
		//Lo que devulve la llamada socket es lo que se utilizara para conectarse
		socketCreado = socket(AF_INET, SOCK_STREAM, 0); //AF_INET Dominio, SOCK_STREAM Tipo, 0 protocolo
		
		if (socketCreado < 0) { //Socket creado es -1 si presento un error al ser creado
			fprintf(stderr,"Error:No se pudo crear el socket \n\a");
			exit(1);
		}   
		printf("Creo socket");
		//Hago set de las propiedades que tiene la estructura que contiene la dirección del server
		direcServer.sin_family = AF_INET; 
		direcServer.sin_addr.s_addr = INADDR_ANY; /* INADDR_ANY sirve para esta fase del proyecto porque permite que reciba
		los paquetes por cualquier interfaz, otra manera seria inet_addr("127.0.0.1") si se recibiera desde consola en que 
		interfaz esta escuchando tambien se deberia convertir a network byte order */
		direcServer.sin_port = numeroPuerto;/* Se utiliza el htons porque debe estar en network byte order
		convierte el valor de maquina a uno de red la manera inversa seria ntohs */
		//
		int resbind=bind(socketCreado, (struct sockaddr *) &direcServer,sizeof(direcServer)); /* Se utiliza para darle al servidor por donde 
		escuchar para que el cliente se conecte */

		if (resbind< 0){
		 fprintf(stderr,"Error:No se pudo escuchar en el puerto solicitado. \n\a");
		 exit(1);
		}

		listen(socketCreado,5);/* Permite que se escuche por el socket que se habia creado, el segundo argumento es el numero
		de conecciones en cola que permite */

		largoCliente = sizeof(direcCliente); //Determina el largo de la dirección del cliente

		while(1){
			socketCliente = accept(socketCreado, (struct sockaddr *) &direcCliente, &largoCliente); /* La función accept recibe el socket
		, la estructura y el largo de la dirección */
			if (socketCliente < 0){
				fprintf(stderr,"Error: Aceptando la conexión. \n\a");
				exit(1);	 
			}
			
			printf("------SESION INICIADA------\n");
			printf("CLIENTE CONECTADO\n");
			strcpy(enviar,"SERVIDOR CONECTADO...");
			send(socketCliente, enviar, 1024,0);

			recv(socketCliente,buf,256,0);
			if(strcmp(buf,"salir")==0){
				break;
			}
			printf("Cliente: %s\n",buf);
			
			printf("Escribir mensaje: ");
			scanf("%*c%[^\n]",buffer);
			send(socketCliente,buffer,256,0);
			if(strcmp(buffer,"salir")==0){
				break;
			}
		}
		close(socketCreado);close(socketCliente); //Cierro las sockets
		return 0;
}
